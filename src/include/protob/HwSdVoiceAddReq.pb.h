/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Mon Jul 17 01:37:04 2017. */

#ifndef PB_HWSDVOICEADDREQ_PB_H_INCLUDED
#define PB_HWSDVOICEADDREQ_PB_H_INCLUDED
#include <protob/pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _HwSdVoiceAddReq {
    char serialNum[64];
    pb_callback_t objVoice;
    bool isReset;
/* @@protoc_insertion_point(struct:HwSdVoiceAddReq) */
} HwSdVoiceAddReq;

typedef struct _HwSdVoiceAddReq_ObjVoice {
    int32_t voiceId;
    char voiceName[64];
    int32_t voiceLength;
/* @@protoc_insertion_point(struct:HwSdVoiceAddReq_ObjVoice) */
} HwSdVoiceAddReq_ObjVoice;

/* Default values for struct fields */

/* Initializer values for message structs */
#define HwSdVoiceAddReq_init_default             {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define HwSdVoiceAddReq_ObjVoice_init_default    {0, {{NULL}, NULL}, 0}
#define HwSdVoiceAddReq_init_zero                {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define HwSdVoiceAddReq_ObjVoice_init_zero       {0, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define HwSdVoiceAddReq_serialNum_tag            1
#define HwSdVoiceAddReq_objVoice_tag             2
#define HwSdVoiceAddReq_isReset_tag              3
#define HwSdVoiceAddReq_ObjVoice_voiceId_tag     1
#define HwSdVoiceAddReq_ObjVoice_voiceName_tag   2
#define HwSdVoiceAddReq_ObjVoice_voiceLength_tag 3

/* Struct field encoding specification for nanopb */
extern const pb_field_t HwSdVoiceAddReq_fields[4];
extern const pb_field_t HwSdVoiceAddReq_ObjVoice_fields[4];

/* Maximum encoded size of messages (where known) */
/* HwSdVoiceAddReq_size depends on runtime parameters */
/* HwSdVoiceAddReq_ObjVoice_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define HWSDVOICEADDREQ_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
